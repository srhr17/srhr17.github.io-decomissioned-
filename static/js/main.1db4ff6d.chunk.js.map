{"version":3,"sources":["App.js","serviceWorker.js","index.js","scriptina.regular.png","sri.jpg"],"names":["App","props","state","style","backgroundColor","class","title","src","aloha","width","sri","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"iQA2EeA,E,kDAvEd,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IACDC,MAAQ,GAFK,E,qDAKlB,OACC,0BACCC,MAAO,CACNC,gBAAiB,YAGlB,6BACC,6BACA,6BACA,gCAAYC,MAAM,0BACjB,uBAAGA,MAAM,SACR,yBAAKA,MAAM,cACT,IADF,wHAMD,4BAAQA,MAAM,qBAAd,SACO,0BAAMC,MAAM,4CAAZ,UAGR,6BAEA,yBAAKD,MAAM,oCAAoCE,IAAKC,MAEpD,yBAAKH,MAAM,YACV,yBAAKA,MAAM,YACV,6BACC,wBAAIA,MAAM,wBAAV,eACa,4CAKf,yBAAKA,MAAM,YACV,6BACA,6BACA,6BACA,yBAAKA,MAAM,wCAAwCF,MAAO,CAAEM,MAAO,OAASF,IAAKG,QAGnF,6BACA,6BAEA,yBAAKL,MAAM,YACV,yBAAKA,MAAM,YACV,6BACC,wBAAIA,MAAM,4BAAV,mBACiB,6CADjB,cAGA,wBAAIA,MAAM,6BAAV,8CACA,wBAAIA,MAAM,4BACR,IACD,yDAFD,c,GAzDUM,a,MCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDuHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BC,EAAOC,QAAU,IAA0B,+C,kBCA3CD,EAAOC,QAAU,IAA0B,iC","file":"static/js/main.1db4ff6d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport aloha from './scriptina.regular.png';\nimport sri from './sri.jpg';\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {};\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<body\n\t\t\t\tstyle={{\n\t\t\t\t\tbackgroundColor: '#1B1B1B'\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<div>\n\t\t\t\t\t<br />\n\t\t\t\t\t<br />\n\t\t\t\t\t<blockquote class=\"blockquote text-center\">\n\t\t\t\t\t\t<p class=\"mb-0 \">\n\t\t\t\t\t\t\t<pre class=\"text-white\">\n\t\t\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t\t\tIf You Are Working On Something That You Really Care About, You Donâ€™t Have To Be Pushed.\n\t\t\t\t\t\t\t\tThe Vision Pulls You.\n\t\t\t\t\t\t\t</pre>\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<footer class=\"blockquote-footer\">\n\t\t\t\t\t\t\tSteve <cite title=\"https://en.wikipedia.org/wiki/Steve_Jobs\">Jobs</cite>\n\t\t\t\t\t\t</footer>\n\t\t\t\t\t</blockquote>\n\t\t\t\t\t<br />\n\n\t\t\t\t\t<img class=\"rounded mx-auto d-block img-fluid\" src={aloha} />\n\n\t\t\t\t\t<div class=\"row m-5 \">\n\t\t\t\t\t\t<div class=\"col-*-* \">\n\t\t\t\t\t\t\t<pre>\n\t\t\t\t\t\t\t\t<h1 class=\"text-right text-info\">\n\t\t\t\t\t\t\t\t\tI was named <kbd>Sri Hari</kbd>\n\t\t\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t\t</pre>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div class=\"col-*-* \">\n\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t<img class=\"img-rounded mx-auto d-block img-fluid\" style={{ width: '70%' }} src={sri} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<br />\n\t\t\t\t\t<br />\n\n\t\t\t\t\t<div class=\"row m-4 \">\n\t\t\t\t\t\t<div class=\"col-*-* \">\n\t\t\t\t\t\t\t<pre>\n\t\t\t\t\t\t\t\t<h1 class=\"text-center text-warning\">\n\t\t\t\t\t\t\t\t\tAn enthusiastic <kbd>Data Science</kbd> aspirant,\n\t\t\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t\t\t<h1 class=\"text-center text-warning \">who intends to do research in the field of</h1>\n\t\t\t\t\t\t\t\t<h1 class=\"text-center text-warning\">\n\t\t\t\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t\t\t\t<kbd>Quantum Machine Learning</kbd>.\n\t\t\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t\t</pre>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{/* hello */}\n\t\t\t\t</div>\n\t\t\t</body>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/scriptina.regular.caa9960d.png\";","module.exports = __webpack_public_path__ + \"static/media/sri.e6178957.jpg\";"],"sourceRoot":""}